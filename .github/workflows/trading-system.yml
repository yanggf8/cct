name: Enhanced Trading System Automated Analysis with Predictive Intelligence

# 5-Tier Intelligent Analysis System with Predictive Analytics Integration
# FEATURES: Predictive signals, pattern recognition, market forecasting, automated alerts
# MIGRATION BENEFITS: Unlimited schedules, 100% FREE, better observability, AI-powered insights
# SCHEDULES: All times in UTC to match original Cloudflare cron schedule

on:
  schedule:
    # Pre-Market Briefing - 8:30 AM EST/EDT (12:30 PM UTC)
    - cron: '30 12 * * 1-5'  # Monday-Friday at 12:30 UTC
    # Intraday Performance Check - 12:00 PM EST/EDT (4:00 PM UTC)
    - cron: '0 16 * * 1-5'   # Monday-Friday at 16:00 UTC
    # End-of-Day Summary - 4:05 PM EST/EDT (8:05 PM UTC)
    - cron: '5 20 * * 1-5'   # Monday-Friday at 20:05 UTC
    # Weekly Review - 10:00 AM EST/EDT Sunday (2:00 PM UTC)
    - cron: '0 14 * * SUN'   # Sunday at 14:00 UTC

  # Manual trigger for testing
  workflow_dispatch:

jobs:
  trading-analysis:
    name: Execute Trading Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Determine Analysis Type
        id: analysis-type
        run: |
          # Get current day and hour to determine analysis type
          CURRENT_HOUR=$(date -u +%H)
          CURRENT_DAY=$(date -u +%u) # 1=Monday, 7=Sunday
          CURRENT_TIME=$(date -u +"%H:%M")

          echo "Current UTC time: $CURRENT_TIME"
          echo "Current day: $CURRENT_DAY"

          # Determine analysis type based on schedule
          if [[ "$CURRENT_DAY" == "7" && "$CURRENT_TIME" == "14:00" ]]; then
            echo "analysis_type=weekly-review" >> $GITHUB_OUTPUT
            echo "endpoint=/weekly-review" >> $GITHUB_OUTPUT
            echo "description=Weekly Review - Comprehensive high-confidence signal analysis"
          elif [[ "$CURRENT_TIME" == "12:30" ]]; then
            echo "analysis_type=pre-market" >> $GITHUB_OUTPUT
            echo "endpoint=/pre-market-briefing" >> $GITHUB_OUTPUT
            echo "description=Pre-Market Briefing - High-confidence signals (≥70%)"
          elif [[ "$CURRENT_TIME" == "16:00" ]]; then
            echo "analysis_type=intraday" >> $GITHUB_OUTPUT
            echo "endpoint=/intraday-check" >> $GITHUB_OUTPUT
            echo "description=Intraday Performance Check - Real-time tracking"
          elif [[ "$CURRENT_TIME" == "20:05" ]]; then
            echo "analysis_type=end-of-day" >> $GITHUB_OUTPUT
            echo "endpoint=/end-of-day-summary" >> $GITHUB_OUTPUT
            echo "description=End-of-Day Summary - Market close analysis"
          else
            # Default for manual triggers
            echo "analysis_type=manual" >> $GITHUB_OUTPUT
            echo "endpoint=/analyze" >> $GITHUB_OUTPUT
            echo "description=Manual Analysis - On-demand trading analysis"
          fi

          echo "Analysis Type: ${{ steps.analysis-type.outputs.analysis_type }}"
          echo "Endpoint: ${{ steps.analysis-type.outputs.endpoint }}"
          echo "Description: ${{ steps.analysis-type.outputs.description }}"

      - name: Execute Trading Analysis
        run: |
          ENDPOINT="${{ steps.analysis-type.outputs.endpoint }}"
          WORKER_URL="https://tft-trading-system.yanggf.workers.dev"
          API_KEY="${{ secrets.X_API_KEY }}"

          echo "🚀 Starting ${{ steps.analysis-type.outputs.description }}"
          echo "📍 Endpoint: $ENDPOINT"
          echo "🌐 Worker URL: $WORKER_URL"

          # Execute analysis request with timeout
          if [[ "$ENDPOINT" == "/analyze" ]]; then
            # For manual analysis, use POST request with symbols
            response=$(curl -s -X POST \
              -H "Content-Type: application/json" \
              -H "X-API-KEY: $API_KEY" \
              -d '{"symbols":["AAPL","MSFT","GOOGL","TSLA","NVDA"]}' \
              --connect-timeout 300 \
              --max-time 600 \
              "$WORKER_URL$ENDPOINT")
          else
            # For scheduled analyses, use GET request
            response=$(curl -s \
              -H "X-API-KEY: $API_KEY" \
              --connect-timeout 300 \
              --max-time 600 \
              "$WORKER_URL$ENDPOINT")
          fi

          echo "📊 Analysis Response:"
          echo "$response" | jq '.' 2>/dev/null || echo "$response"

          # Extract key metrics for logging
          success=$(echo "$response" | jq -r '.success // "unknown"')
          if [[ "$success" == "true" ]]; then
            echo "✅ Analysis completed successfully"

            # Log additional metrics if available
            if echo "$response" | jq -e '.analyzed_date' > /dev/null 2>&1; then
              analyzed_date=$(echo "$response" | jq -r '.analyzed_date')
              echo "📅 Analysis Date: $analyzed_date"
            fi

            if echo "$response" | jq -e '.summary' > /dev/null 2>&1; then
              system_status=$(echo "$response" | jq -r '.summary.system_status // "N/A"')
              echo "📈 System Status: $system_status"
            fi

          else
            echo "❌ Analysis failed"
            echo "Response: $response"
            exit 1
          fi

      - name: Execute Predictive Analytics
        run: |
          WORKER_URL="https://tft-trading-system.yanggf.workers.dev"
          API_KEY="${{ secrets.X_API_KEY }}"
          ANALYSIS_TYPE="${{ steps.analysis-type.outputs.analysis_type }}"

          echo "🧠 Running Predictive Analytics Enhancement"
          echo "Analysis Type: $ANALYSIS_TYPE"

          # Run predictive signals analysis
          echo "📈 Fetching predictive signals..."
          signals_response=$(curl -s \
            -H "X-API-KEY: $API_KEY" \
            --connect-timeout 60 \
            --max-time 120 \
            "$WORKER_URL/api/v1/predictive/signals")

          signals_success=$(echo "$signals_response" | jq -r '.success // "unknown"')
          if [[ "$signals_success" == "true" ]]; then
            echo "✅ Predictive signals generated successfully"

            # Extract key predictive insights
            outlook=$(echo "$signals_response" | jq -r '.data.short_term_outlook.direction // "N/A"')
            confidence=$(echo "$signals_response" | jq -r '.data.short_term_outlook.confidence // 0')
            time_horizon=$(echo "$signals_response" | jq -r '.data.short_term_outlook.time_horizon // "N/A"')

            echo "🎯 Market Outlook: $outlook (Confidence: $confidence, Horizon: $time_horizon)"

            # Store for enhanced notification
            echo "market_outlook=$outlook" >> $GITHUB_ENV
            echo "market_confidence=$confidence" >> $GITHUB_ENV
            echo "time_horizon=$time_horizon" >> $GITHUB_ENV

            # Log sector predictions if available
            top_performers=$(echo "$signals_response" | jq -r '.data.sector_predictions.top_performers | length // 0')
            if [[ "$top_performers" -gt 0 ]]; then
              echo "📊 Top Sector Predictions: $top_performers sectors identified"
              echo "$signals_response" | jq -r '.data.sector_predictions.top_performers[] | "  - \(.name): \(.predicted_return)% (confidence: \(.confidence))"' || true
            fi

            # Log risk indicators
            tail_risk=$(echo "$signals_response" | jq -r '.data.risk_indicators.tail_risk_probability // 0')
            volatility_outlook=$(echo "$signals_response" | jq -r '.data.risk_indicators.volatility_outlook // "N/A"')
            echo "⚠️  Risk Assessment: Tail risk $tail_risk, Volatility $volatility_outlook"

          else
            echo "⚠️ Predictive signals failed (non-critical)"
            echo "Response: $signals_response"
            # Set default values for notification
            echo "market_outlook=Unavailable" >> $GITHUB_ENV
            echo "market_confidence=0" >> $GITHUB_ENV
            echo "time_horizon=N/A" >> $GITHUB_ENV
          fi

          # Run comprehensive insights for weekly reviews
          if [[ "$ANALYSIS_TYPE" == "weekly-review" ]]; then
            echo "🔍 Running comprehensive predictive insights..."
            insights_response=$(curl -s \
              -H "X-API-KEY: $API_KEY" \
              --connect-timeout 60 \
              --max-time 120 \
              "$WORKER_URL/api/v1/predictive/insights")

            insights_success=$(echo "$insights_response" | jq -r '.success // "unknown"')
            if [[ "$insights_success" == "true" ]]; then
              echo "✅ Predictive insights generated successfully"

              # Extract strategic insights
              investment_thesis=$(echo "$insights_response" | jq -r '.data.overall_outlook.investment_thesis // "N/A"')
              echo "💡 Investment Thesis: $investment_thesis"

              # Log tactical recommendations
              position_sizing=$(echo "$insights_response" | jq -r '.data.tactical_recommendations.position_sizing // "N/A"')
              echo "📋 Position Sizing: $position_sizing"

              # Store for enhanced notification
              echo "investment_thesis=$investment_thesis" >> $GITHUB_ENV

            else
              echo "⚠️ Predictive insights failed (non-critical)"
              echo "Response: $insights_response"
              echo "investment_thesis=Unavailable" >> $GITHUB_ENV
            fi
          else
            echo "investment_thesis=Weekly analysis only" >> $GITHUB_ENV
          fi

          echo "🧠 Predictive Analytics Complete"

      - name: Log Analysis Summary
        run: |
          echo "📋 Analysis Summary"
          echo "=================="
          echo "Timestamp: $(date -u)"
          echo "Analysis Type: ${{ steps.analysis-type.outputs.analysis_type }}"
          echo "Description: ${{ steps.analysis-type.outputs.description }}"
          echo "Endpoint: ${{ steps.analysis-type.outputs.endpoint }}"
          echo "Worker URL: https://tft-trading-system.yanggf.workers.dev"
          echo "Status: Completed successfully ✅"

      - name: Send Teams Success Notification
        if: success()
        run: |
          ENDPOINT="${{ steps.analysis-type.outputs.endpoint }}"
          WORKER_URL="https://tft-trading-system.yanggf.workers.dev"
          ANALYSIS_TYPE="${{ steps.analysis-type.outputs.analysis_type }}"

          echo "📢 Sending Teams success notification..."

          # Build enhanced Teams message with predictive analytics
          TEAMS_MESSAGE=$(cat <<EOF
          {
            "@type": "MessageCard",
            "@context": "http://schema.org/extensions",
            "themeColor": "00B294",
            "summary": "Trading Analysis Complete with Predictive Intelligence",
            "sections": [{
              "activityTitle": "🧠 Enhanced Trading Analysis Complete",
              "activitySubtitle": "$(date -u)",
              "activityText": "Analysis completed successfully with predictive intelligence",
              "facts": [
                {"name": "Analysis Type", "value": "${{ steps.analysis-type.outputs.description }}"},
                {"name": "Market Outlook", "value": "🎯 ${{ env.market_outlook }} (Confidence: ${{ env.market_confidence }})"},
                {"name": "Time Horizon", "value": "${{ env.time_horizon }}"},
                {"name": "Investment Thesis", "value": "${{ env.investment_thesis }}"},
                {"name": "Primary Report", "value": "[View Results](${WORKER_URL}${ENDPOINT})"},
                {"name": "Predictive Analytics", "value": "[View Signals](${WORKER_URL}/api/v1/predictive/signals)"},
                {"name": "System Status", "value": "🟢 Operational with Intelligence"}
              ],
              "markdown": true
            }],
            "potentialAction": [
              {
                "@type": "OpenUri",
                "name": "📊 View Primary Report",
                "target": ["${WORKER_URL}${ENDPOINT}"]
              },
              {
                "@type": "OpenUri",
                "name": "🧠 View Predictive Signals",
                "target": ["${WORKER_URL}/api/v1/predictive/signals"]
              },
              {
                "@type": "OpenUri",
                "name": "📈 Market Intelligence Dashboard",
                "target": ["${WORKER_URL}/api/v1/market-intelligence/dashboard"]
              }
            ]
          }
          EOF
          )

          # Send to Teams webhook
          curl -X POST \
            -H "Content-Type: application/json" \
            -d "$TEAMS_MESSAGE" \
            "${{ secrets.TEAMS_WEBHOOK_URL }}" || echo "⚠️ Teams notification failed (not critical)"

      - name: Notify on Failure
        if: failure()
        run: |
          echo "🚨 Trading Analysis Failed!"
          echo "Analysis Type: ${{ steps.analysis-type.outputs.analysis_type }}"
          echo "Timestamp: $(date -u)"
          echo "Please check the worker logs and system status."

          # Send Teams error notification
          TEAMS_ERROR_MESSAGE=$(cat <<EOF
          {
            "@type": "MessageCard",
            "@context": "http://schema.org/extensions",
            "themeColor": "FF0000",
            "summary": "Trading Analysis Failed",
            "sections": [{
              "activityTitle": "🚨 Trading Analysis Failed",
              "activitySubtitle": "$(date -u)",
              "activityText": "Analysis execution failed",
              "facts": [
                {"name": "Analysis Type", "value": "${{ steps.analysis-type.outputs.description }}"},
                {"name": "System Status", "value": "🔴 Error"},
                {"name": "Time", "value": "$(date -u)"}
              ],
              "markdown": true
            }]
          }
          EOF
          )

          # Send error to Teams
          curl -X POST \
            -H "Content-Type: application/json" \
            -d "$TEAMS_ERROR_MESSAGE" \
            "${{ secrets.TEAMS_WEBHOOK_URL }}" || echo "⚠️ Teams error notification failed"

  # Health check job
  health-check:
    name: System Health Check
    runs-on: ubuntu-latest
    needs: trading-analysis

    steps:
      - name: Execute Health Check
        run: |
          WORKER_URL="https://tft-trading-system.yanggf.workers.dev"
          API_KEY="${{ secrets.X_API_KEY }}"

          echo "🏥 Running System Health Check"

          # Check overall system health
          health_response=$(curl -s -H "X-API-KEY: $API_KEY" "$WORKER_URL/health")
          echo "System Health: $health_response"

          # Check model health
          model_health_response=$(curl -s "$WORKER_URL/model-health")
          echo "Model Health: $model_health_response"

          # Check predictive analytics health
          predictive_health_response=$(curl -s -H "X-API-KEY: $API_KEY" "$WORKER_URL/api/v1/predictive/health")
          echo "Predictive Analytics Health: $predictive_health_response"

          # Check market intelligence health
          market_intel_response=$(curl -s -H "X-API-KEY: $API_KEY" "$WORKER_URL/api/v1/market-intelligence/dashboard" | head -c 500)
          echo "Market Intelligence Status: Available"

          # Log comprehensive health status
          system_status=$(echo "$health_response" | jq -r '.status // "unknown"')
          predictive_status=$(echo "$predictive_health_response" | jq -r '.data.status // "unknown"')

          echo "🏥 Health Check Summary:"
          echo "  - Core System: $system_status"
          echo "  - Predictive Analytics: $predictive_status"
          echo "  - Market Intelligence: Available"
          echo "  - Model Health: Checked"

          if [[ "$system_status" == "healthy" && "$predictive_status" == "healthy" ]]; then
            echo "✅ All systems are healthy and operational"
          else
            echo "⚠️ Some systems require attention"
          fi

# Enhanced Workflow Configuration
# ==============================
# CAPABILITIES:
# - Predictive analytics integration (signals, patterns, insights, forecasting)
# - Market intelligence automation (sector rotation, market drivers)
# - Enhanced notifications with forward-looking insights
# - Comprehensive health monitoring across all systems
#
# COST: 100% FREE - Unlimited GitHub Actions for public repositories
# LIMITS:
# - 3,000 minutes/month for free tier (sufficient for ~40 enhanced analyses/day)
# - 20 concurrent jobs
# - 2GB storage per workflow
#
# SECRETS REQUIRED:
# - X_API_KEY: API key for trading system authentication (your value: yanggf)
# - TEAMS_WEBHOOK_URL: Microsoft Teams webhook URL for notifications (optional)
#
# NOTE: WORKER_URL is hardcoded as it's public information, not a secret
#
# MONITORING:
# - All executions logged in GitHub Actions console
# - Enhanced notifications with predictive insights
# - Multi-system health monitoring (core + predictive + market intelligence)
# - Performance tracking and trend analysis
#
# NEW FEATURES:
# - Predictive signals generation with confidence scoring
# - Market forecasting with multiple time horizons
# - Pattern recognition (seasonal, technical, sentiment)
# - Investment thesis generation with tactical recommendations
# - Risk assessment with tail probability analysis