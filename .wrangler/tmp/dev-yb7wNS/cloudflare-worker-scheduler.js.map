{
  "version": 3,
  "sources": ["../bundle-4gJpID/checked-fetch.js", "../../../cloudflare-worker-scheduler.js", "../../../../../.nvm/versions/node/v23.2.0/lib/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../../../.nvm/versions/node/v23.2.0/lib/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-4gJpID/middleware-insertion-facade.js", "../../../../../.nvm/versions/node/v23.2.0/lib/node_modules/wrangler/templates/middleware/common.ts", "../bundle-4gJpID/middleware-loader.entry.ts"],
  "sourceRoot": "/home/yanggf/a/cct/.wrangler/tmp/dev-yb7wNS",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "/**\n * Cloudflare Worker - Automated Pre-Market Trading Analysis\n * Runs TFT+N-HITS trading system analysis at scheduled times (6:30-9:30 AM EST)\n * Uses real Neural Hierarchical Interpolation for Time Series as backup\n * Stores results in Cloudflare KV for retrieval by local system\n * Supports Email, Slack, Facebook Messenger, and LINE alerts\n */\n\n// Import messenger alert functions - disabled for local development\n// import { sendFacebookMessengerAlert, sendLINEAlert, sendCriticalMessengerAlert } from './messenger-alerts.js';\n\nexport default {\n  async scheduled(controller, env, ctx) {\n    const scheduledTime = new Date(controller.scheduledTime);\n    const estTime = new Date(scheduledTime.toLocaleString(\"en-US\", { timeZone: \"America/New_York\" }));\n    \n    console.log(`\uD83D\uDE80 Scheduled analysis triggered at ${estTime.toISOString()}`);\n    \n    try {\n      const analysisResult = await runPreMarketAnalysis(env);\n      \n      // Store results in KV for local system retrieval\n      await env.TRADING_RESULTS.put(\n        `analysis_${estTime.toISOString().split('T')[0]}`, // YYYY-MM-DD key\n        JSON.stringify(analysisResult),\n        { expirationTtl: 86400 } // 24 hours\n      );\n      \n      // Send notifications if enabled\n      if (analysisResult.alerts && analysisResult.alerts.length > 0) {\n        await sendAlerts(analysisResult, env);\n      }\n      \n      console.log(`\u2705 Analysis completed: ${analysisResult.symbols_analyzed.length} symbols`);\n      \n    } catch (error) {\n      console.error(`\u274C Scheduled analysis failed:`, error);\n      \n      // Store error for debugging\n      await env.TRADING_RESULTS.put(\n        `error_${estTime.toISOString()}`,\n        JSON.stringify({\n          error: error.message,\n          timestamp: estTime.toISOString(),\n          type: 'scheduled_analysis_failure'\n        }),\n        { expirationTtl: 86400 }\n      );\n      \n      // Send critical alert\n      await sendCriticalAlert(error.message, env);\n    }\n  },\n\n  async fetch(request, env, ctx) {\n    const url = new URL(request.url);\n    \n    // Handle different endpoints\n    if (url.pathname === '/analyze') {\n      return handleManualAnalysis(request, env);\n    } else if (url.pathname === '/results') {\n      return handleGetResults(request, env);\n    } else if (url.pathname === '/health') {\n      return handleHealthCheck(request, env);\n    } else {\n      return new Response('Trading System Worker API\\nEndpoints: /analyze, /results, /health', { \n        status: 200,\n        headers: { 'Content-Type': 'text/plain' }\n      });\n    }\n  }\n};\n\n/**\n * Run complete pre-market analysis for all symbols\n */\nasync function runPreMarketAnalysis(env) {\n  const symbols = ['AAPL', 'TSLA', 'MSFT', 'GOOGL', 'NVDA'];\n  const analysisResults = {\n    run_id: `worker_${new Date().toISOString().replace(/[:.]/g, '_')}`,\n    timestamp: new Date().toISOString(),\n    symbols_analyzed: [],\n    trading_signals: {},\n    alerts: [],\n    performance_metrics: {},\n    status: 'running',\n    worker_version: '1.0-Cloudflare'\n  };\n  \n  console.log(`\uD83D\uDCCA Starting analysis for ${symbols.length} symbols...`);\n  \n  // Analyze each symbol\n  for (const symbol of symbols) {\n    try {\n      console.log(`   \uD83D\uDCC8 Analyzing ${symbol}...`);\n      \n      // Get market data\n      const marketData = await getMarketData(symbol);\n      if (!marketData.success) {\n        throw new Error(`Market data failed: ${marketData.error}`);\n      }\n      \n      // Get TFT prediction (primary)\n      let priceSignal;\n      try {\n        priceSignal = await getTFTPrediction(symbol, marketData.data, env);\n        priceSignal.model_used = 'TFT-Primary';\n      } catch (tftError) {\n        console.log(`   \u26A0\uFE0F TFT failed for ${symbol}, using N-HITS backup: ${tftError.message}`);\n        // Fallback to real N-HITS neural network model\n        priceSignal = await getRealNHITSPrediction(symbol, marketData.data, env);\n        priceSignal.model_used = priceSignal.model_type || 'Real-NHITS-Backup';\n      }\n      \n      // Get sentiment analysis\n      const sentimentSignal = await getSentimentAnalysis(symbol, env);\n      \n      // Combine signals\n      const combinedSignal = combineSignals(priceSignal, sentimentSignal, symbol, marketData.current_price);\n      \n      analysisResults.symbols_analyzed.push(symbol);\n      analysisResults.trading_signals[symbol] = combinedSignal;\n      \n      // Check for high-confidence signals\n      if (combinedSignal.confidence > 0.85 && combinedSignal.action.includes('BUY') || combinedSignal.action.includes('SELL')) {\n        analysisResults.alerts.push({\n          level: 'HIGH_CONFIDENCE',\n          symbol: symbol,\n          message: `\uD83C\uDFAF High confidence signal: ${symbol} - ${combinedSignal.action} (${(combinedSignal.confidence * 100).toFixed(1)}%)`,\n          timestamp: new Date().toISOString()\n        });\n      }\n      \n      console.log(`   \u2705 ${symbol}: ${combinedSignal.action} (conf: ${(combinedSignal.confidence * 100).toFixed(1)}%)`);\n      \n    } catch (error) {\n      console.error(`   \u274C ${symbol} analysis failed:`, error.message);\n      analysisResults.alerts.push({\n        level: 'ERROR',\n        symbol: symbol,\n        message: `Analysis failed: ${error.message}`,\n        timestamp: new Date().toISOString()\n      });\n    }\n  }\n  \n  // Generate performance metrics\n  analysisResults.performance_metrics = generatePerformanceMetrics(analysisResults);\n  analysisResults.status = 'completed';\n  \n  return analysisResults;\n}\n\n/**\n * Get market data from Yahoo Finance API\n */\nasync function getMarketData(symbol) {\n  try {\n    // Using Yahoo Finance API alternative endpoint\n    const response = await fetch(`https://query1.finance.yahoo.com/v8/finance/chart/${symbol}`, {\n      headers: { 'User-Agent': 'Mozilla/5.0 (compatible; TradingBot/1.0)' }\n    });\n    \n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}`);\n    }\n    \n    const data = await response.json();\n    const result = data.chart.result[0];\n    \n    if (!result || !result.indicators || !result.indicators.quote[0]) {\n      throw new Error('Invalid data format');\n    }\n    \n    const quote = result.indicators.quote[0];\n    const timestamps = result.timestamp;\n    const current_price = quote.close[quote.close.length - 1];\n    \n    // Format last 30 days of OHLCV data\n    const ohlcv_data = [];\n    const days_to_take = Math.min(30, timestamps.length);\n    \n    for (let i = timestamps.length - days_to_take; i < timestamps.length; i++) {\n      if (quote.open[i] && quote.high[i] && quote.low[i] && quote.close[i]) {\n        ohlcv_data.push([\n          quote.open[i],\n          quote.high[i], \n          quote.low[i],\n          quote.close[i],\n          quote.volume[i] || 0\n        ]);\n      }\n    }\n    \n    return {\n      success: true,\n      current_price: current_price,\n      data: ohlcv_data\n    };\n    \n  } catch (error) {\n    return {\n      success: false,\n      error: error.message\n    };\n  }\n}\n\n/**\n * Get TFT prediction from ModelScope API\n */\nasync function getTFTPrediction(symbol, ohlcv_data, env) {\n  try {\n    // Call ModelScope API\n    const response = await fetch('https://www.modelscope.cn/api/v1/models/yanggf2/tft-primary-nhits-backup-predictor/predict', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${env.MODELSCOPE_API_TOKEN}`\n      },\n      body: JSON.stringify({\n        symbol: symbol,\n        sequence_data: ohlcv_data,\n        model_type: 'TFT'\n      })\n    });\n    \n    if (!response.ok) {\n      throw new Error(`ModelScope API error: ${response.status}`);\n    }\n    \n    const result = await response.json();\n    \n    return {\n      signal_score: result.predicted_direction === 'UP' ? 0.7 : -0.7,\n      confidence: result.confidence || 0.8,\n      predicted_price: result.predicted_price,\n      current_price: result.current_price,\n      direction: result.predicted_direction,\n      model_latency: result.inference_time || 45\n    };\n    \n  } catch (error) {\n    throw new Error(`TFT prediction failed: ${error.message}`);\n  }\n}\n\n/**\n * Get Real N-HITS prediction (backup model)\n * Uses local N-HITS API service for authentic neural network predictions\n */\nasync function getRealNHITSPrediction(symbol, ohlcv_data, env) {\n  try {\n    // Try to call local N-HITS API service\n    const nhits_api_url = env.NHITS_API_URL || 'http://localhost:5000';\n    \n    const response = await fetch(`${nhits_api_url}/predict`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        symbol: symbol\n      }),\n      timeout: 5000 // 5 second timeout\n    });\n    \n    if (!response.ok) {\n      throw new Error(`N-HITS API error: ${response.status}`);\n    }\n    \n    const nhitsResult = await response.json();\n    \n    // Convert N-HITS API response to worker format\n    return {\n      signal_score: nhitsResult.signal_score || 0,\n      confidence: nhitsResult.confidence || 0.7,\n      predicted_price: nhitsResult.predicted_price,\n      current_price: nhitsResult.current_price,\n      direction: nhitsResult.direction || 'NEUTRAL',\n      model_latency: nhitsResult.inference_time_ms || 50,\n      model_type: nhitsResult.model_used || 'Real-NHITS-Neural',\n      is_neural: nhitsResult.is_neural || false,\n      architecture: nhitsResult.model_type || 'Neural Hierarchical Interpolation'\n    };\n    \n  } catch (error) {\n    console.log(`   \u26A0\uFE0F N-HITS API failed for ${symbol}, using statistical fallback: ${error.message}`);\n    \n    // Fallback to enhanced statistical model (better than simple moving average)\n    return getStatisticalFallback(symbol, ohlcv_data);\n  }\n}\n\n/**\n * Enhanced statistical fallback (when N-HITS API is unavailable)\n * Uses hierarchical trend analysis inspired by N-HITS architecture\n */\nfunction getStatisticalFallback(symbol, ohlcv_data) {\n  try {\n    const closes = ohlcv_data.map(d => d[3]); // Close prices\n    const current_price = closes[closes.length - 1];\n    \n    // Multi-scale trend analysis (mimics N-HITS hierarchical structure)\n    const short_trend = closes.length >= 5 ? \n      (closes.slice(-5).reduce((a, b) => a + b) / 5 - closes.slice(-10, -5).reduce((a, b) => a + b) / 5) / current_price : 0;\n    \n    const medium_trend = closes.length >= 10 ? \n      (closes.slice(-10).reduce((a, b) => a + b) / 10 - closes.slice(-20, -10).reduce((a, b) => a + b) / 10) / current_price : 0;\n    \n    // Hierarchical combination (weighted like N-HITS stacks)\n    const combined_trend = 0.5 * short_trend + 0.3 * medium_trend;\n    const predicted_change = combined_trend * 0.8; // Conservative prediction\n    const predicted_price = current_price * (1 + predicted_change);\n    \n    return {\n      signal_score: combined_trend > 0 ? 0.5 : -0.5,\n      confidence: 0.6, // Moderate confidence for statistical model\n      predicted_price: predicted_price,\n      current_price: current_price,\n      direction: combined_trend > 0 ? 'UP' : 'DOWN',\n      model_latency: 5,\n      model_type: 'Statistical-Hierarchical-Fallback',\n      is_neural: false,\n      note: 'Enhanced statistical model with hierarchical trend analysis'\n    };\n    \n  } catch (error) {\n    // Ultimate fallback\n    return {\n      signal_score: 0,\n      confidence: 0.5,\n      predicted_price: current_price,\n      current_price: current_price,\n      direction: 'NEUTRAL',\n      model_latency: 1,\n      model_type: 'Neutral-Fallback',\n      error: error.message\n    };\n  }\n}\n\n/**\n * Get sentiment analysis using Cloudflare AI\n */\nasync function getSentimentAnalysis(symbol, env) {\n  try {\n    console.log(`   \uD83D\uDD0D Getting AI sentiment for ${symbol}...`);\n    \n    // Generate financial news query\n    const newsQuery = `${symbol} stock market news financial earnings revenue profit`;\n    \n    // Use Cloudflare AI for sentiment analysis\n    const sentiment = await env.AI.run('@cf/huggingface/distilbert-sst-2-int8', {\n      text: `Financial outlook for ${symbol}: Recent market performance and analyst sentiment`\n    });\n    \n    console.log(`   \u2705 AI sentiment for ${symbol}:`, sentiment);\n    \n    // Convert sentiment to signal\n    const isPositive = sentiment.label === 'POSITIVE';\n    const confidence = sentiment.score;\n    \n    return {\n      signal_score: isPositive ? 1.0 : -1.0,\n      confidence: confidence,\n      sentiment: isPositive ? 'BULLISH' : 'BEARISH',\n      recommendation: isPositive ? 'BUY' : 'SELL'\n    };\n    \n  } catch (error) {\n    console.error(`   \u274C Sentiment AI failed for ${symbol}:`, error.message);\n    // Return neutral sentiment on error\n    return {\n      signal_score: 0.0,\n      confidence: 0.5,\n      sentiment: 'NEUTRAL',\n      recommendation: 'HOLD',\n      error: error.message\n    };\n  }\n}\n\n/**\n * Combine price and sentiment signals\n */\nfunction combineSignals(priceSignal, sentimentSignal, symbol, currentPrice) {\n  // Weighted combination: 60% price, 40% sentiment\n  const priceWeight = 0.6;\n  const sentimentWeight = 0.4;\n  \n  const combinedScore = (priceSignal.signal_score * priceWeight) + (sentimentSignal.signal_score * sentimentWeight);\n  const avgConfidence = (priceSignal.confidence * priceWeight) + (sentimentSignal.confidence * sentimentWeight);\n  \n  // Determine action based on combined score\n  let action;\n  if (combinedScore > 0.5) {\n    action = 'BUY STRONG';\n  } else if (combinedScore > 0.2) {\n    action = 'BUY WEAK';\n  } else if (combinedScore < -0.5) {\n    action = 'SELL STRONG';\n  } else if (combinedScore < -0.2) {\n    action = 'SELL WEAK';\n  } else {\n    action = 'HOLD NEUTRAL';\n  }\n  \n  return {\n    success: true,\n    symbol: symbol,\n    action: action,\n    signal_score: combinedScore,\n    confidence: avgConfidence,\n    current_price: currentPrice,\n    reasoning: `${priceSignal.direction} price prediction (${priceSignal.model_used}) + ${sentimentSignal.sentiment} sentiment`,\n    timestamp: new Date().toISOString(),\n    system_version: '5.0-Cloudflare-Worker',\n    components: {\n      price_prediction: {\n        signal_score: priceSignal.signal_score,\n        confidence: priceSignal.confidence,\n        model_used: priceSignal.model_used,\n        predicted_price: priceSignal.predicted_price,\n        direction: priceSignal.direction,\n        latency_ms: priceSignal.model_latency\n      },\n      sentiment_analysis: {\n        signal_score: sentimentSignal.signal_score,\n        confidence: sentimentSignal.confidence,\n        sentiment: sentimentSignal.sentiment,\n        recommendation: sentimentSignal.recommendation\n      }\n    }\n  };\n}\n\n/**\n * Generate performance metrics\n */\nfunction generatePerformanceMetrics(analysisResults) {\n  const signals = analysisResults.trading_signals;\n  const successfulAnalyses = Object.values(signals).filter(s => s.success).length;\n  \n  // Signal distribution\n  const signalCounts = { BUY: 0, SELL: 0, HOLD: 0 };\n  const confidenceScores = [];\n  \n  Object.values(signals).forEach(signal => {\n    if (signal.success) {\n      const action = signal.action.split(' ')[0];\n      if (action in signalCounts) {\n        signalCounts[action]++;\n      }\n      confidenceScores.push(signal.confidence);\n    }\n  });\n  \n  const avgConfidence = confidenceScores.length > 0 ? \n    confidenceScores.reduce((a, b) => a + b) / confidenceScores.length : 0;\n  \n  return {\n    success_rate: (successfulAnalyses / analysisResults.symbols_analyzed.length) * 100,\n    signal_distribution: signalCounts,\n    avg_confidence: avgConfidence,\n    high_confidence_signals: confidenceScores.filter(c => c > 0.85).length,\n    total_symbols: analysisResults.symbols_analyzed.length,\n    successful_analyses: successfulAnalyses\n  };\n}\n\n/**\n * Send alerts via configured channels\n */\nasync function sendAlerts(analysisResults, env) {\n  const alerts = analysisResults.alerts.filter(a => a.level === 'HIGH_CONFIDENCE');\n  \n  if (alerts.length === 0) return;\n  \n  // Send email alerts\n  if (env.EMAIL_ENABLED === 'true') {\n    await sendEmailAlerts(alerts, analysisResults, env);\n  }\n  \n  // Send Slack alerts  \n  if (env.SLACK_WEBHOOK_URL) {\n    await sendSlackAlerts(alerts, analysisResults, env);\n  }\n  \n  // Send Facebook Messenger alerts\n  if (env.FACEBOOK_PAGE_TOKEN && env.FACEBOOK_RECIPIENT_ID) {\n    await sendFacebookMessengerAlert(alerts, analysisResults, env);\n  }\n  \n  // Send LINE alerts\n  if (env.LINE_CHANNEL_TOKEN && env.LINE_USER_ID) {\n    await sendLINEAlert(alerts, analysisResults, env);\n  }\n}\n\n/**\n * Send email alerts using MailChannels\n */\nasync function sendEmailAlerts(alerts, analysisResults, env) {\n  try {\n    const emailContent = `\nTrading System Alert - ${new Date().toLocaleDateString()}\n\n${alerts.length} high-confidence trading signals detected:\n\n${alerts.map(alert => `\u2022 ${alert.symbol}: ${alert.message}`).join('\\n')}\n\nPerformance Summary:\n\u2022 Success Rate: ${analysisResults.performance_metrics.success_rate.toFixed(1)}%\n\u2022 Average Confidence: ${(analysisResults.performance_metrics.avg_confidence * 100).toFixed(1)}%\n\u2022 Signal Distribution: ${JSON.stringify(analysisResults.performance_metrics.signal_distribution)}\n\nView full results: https://your-worker-url.workers.dev/results\n\nGenerated by Cloudflare Trading Worker\n    `;\n    \n    await fetch('https://api.mailchannels.net/tx/v1/send', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        personalizations: [{\n          to: [{ email: env.ALERT_EMAIL }]\n        }],\n        from: { email: 'alerts@tradingsystem.workers.dev' },\n        subject: `Trading Alert - ${alerts.length} High Confidence Signals`,\n        content: [{ type: 'text/plain', value: emailContent }]\n      })\n    });\n    \n  } catch (error) {\n    console.error('Email alert failed:', error);\n  }\n}\n\n/**\n * Send Slack alerts\n */\nasync function sendSlackAlerts(alerts, analysisResults, env) {\n  try {\n    const slackMessage = {\n      text: `\uD83C\uDFAF Trading System Alert - ${alerts.length} High Confidence Signals`,\n      attachments: [\n        {\n          color: 'good',\n          fields: alerts.map(alert => ({\n            title: alert.symbol,\n            value: alert.message.replace('\uD83C\uDFAF High confidence signal: ', ''),\n            short: true\n          }))\n        },\n        {\n          color: '#36a64f',\n          title: 'Performance Summary',\n          text: `Success Rate: ${analysisResults.performance_metrics.success_rate.toFixed(1)}% | Avg Confidence: ${(analysisResults.performance_metrics.avg_confidence * 100).toFixed(1)}%`\n        }\n      ]\n    };\n    \n    await fetch(env.SLACK_WEBHOOK_URL, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(slackMessage)\n    });\n    \n  } catch (error) {\n    console.error('Slack alert failed:', error);\n  }\n}\n\n/**\n * Send critical error alert\n */\nasync function sendCriticalAlert(errorMessage, env) {\n  // Send Slack alert\n  if (env.SLACK_WEBHOOK_URL) {\n    try {\n      await fetch(env.SLACK_WEBHOOK_URL, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          text: '\uD83D\uDEA8 CRITICAL: Trading System Worker Failed',\n          attachments: [{\n            color: 'danger',\n            fields: [\n              { title: 'Error', value: errorMessage, short: false },\n              { title: 'Timestamp', value: new Date().toISOString(), short: true }\n            ]\n          }]\n        })\n      });\n    } catch (error) {\n      console.error('Critical alert failed:', error);\n    }\n  }\n  \n  // Send messenger alerts (Facebook + LINE)\n  await sendCriticalMessengerAlert(errorMessage, env);\n}\n\n/**\n * Handle manual analysis request\n */\nasync function handleManualAnalysis(request, env) {\n  try {\n    const result = await runPreMarketAnalysis(env);\n    \n    return new Response(JSON.stringify(result, null, 2), {\n      status: 200,\n      headers: { 'Content-Type': 'application/json' }\n    });\n    \n  } catch (error) {\n    return new Response(JSON.stringify({ error: error.message }), {\n      status: 500,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n}\n\n/**\n * Handle get results request\n */\nasync function handleGetResults(request, env) {\n  try {\n    const url = new URL(request.url);\n    const date = url.searchParams.get('date') || new Date().toISOString().split('T')[0];\n    \n    const result = await env.TRADING_RESULTS.get(`analysis_${date}`);\n    \n    if (result) {\n      return new Response(result, {\n        status: 200,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    } else {\n      return new Response(JSON.stringify({ error: 'No results found for date' }), {\n        status: 404,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n    \n  } catch (error) {\n    return new Response(JSON.stringify({ error: error.message }), {\n      status: 500,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n}\n\n/**\n * Handle health check\n */\nasync function handleHealthCheck(request, env) {\n  const health = {\n    status: 'healthy',\n    timestamp: new Date().toISOString(),\n    version: '1.0-Cloudflare-Worker',\n    services: {\n      kv_storage: 'available',\n      ai_service: env.AI ? 'available' : 'unavailable',\n      modelscope_api: env.MODELSCOPE_API_TOKEN ? 'configured' : 'not_configured'\n    }\n  };\n  \n  return new Response(JSON.stringify(health, null, 2), {\n    status: 200,\n    headers: { 'Content-Type': 'application/json' }\n  });\n}", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/home/yanggf/a/cct/cloudflare-worker-scheduler.js\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/home/yanggf/.nvm/versions/node/v23.2.0/lib/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/home/yanggf/.nvm/versions/node/v23.2.0/lib/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/home/yanggf/a/cct/cloudflare-worker-scheduler.js\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/home/yanggf/a/cct/.wrangler/tmp/bundle-4gJpID/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/home/yanggf/.nvm/versions/node/v23.2.0/lib/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/home/yanggf/a/cct/.wrangler/tmp/bundle-4gJpID/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/home/yanggf/a/cct/.wrangler/tmp/bundle-4gJpID/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": ["current_price"]
}
