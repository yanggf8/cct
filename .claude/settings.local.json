{
  "permissions": {
    "allow": [
      "Bash(curl:*)",
      "Bash(node:*)",
      "Bash(git add:*)",
      "Bash(git push:*)",
      "Bash(wrangler publish:*)",
      "Bash(npx wrangler:*)",
      "Bash(wrangler:*)",
      "Bash(git commit:*)",
      "Bash(grep:*)",
      "WebSearch",
      "WebFetch(domain:developers.cloudflare.com)",
      "mcp__gemini-cli__ask-gemini",
      "WebFetch(domain:community.cloudflare.com)",
      "Bash(python:*)",
      "Bash(npm install)",
      "Bash(npm audit:*)",
      "Bash(npm install:*)",
      "Bash(npm run build:*)",
      "Bash(npm run:*)",
      "Read(//home/yanggf/**)",
      "Bash(env -u CLOUDFLARE_API_TOKEN wrangler deploy)",
      "Bash(export CLOUDFLARE_API_TOKEN=\"\")",
      "Bash(env -u CLOUDFLARE_API_TOKEN wrangler whoami)",
      "Bash(env -u CLOUDFLARE_API_TOKEN wrangler tail)",
      "Bash(env -u CLOUDFLARE_API_TOKEN wrangler deployments list)",
      "Bash(env -u CLOUDFLARE_API_TOKEN wrangler kv:key list --binding=TRADING_RESULTS)",
      "Bash(env -u CLOUDFLARE_API_TOKEN wrangler kv key list --binding=TRADING_RESULTS)",
      "Bash(env -u CLOUDFLARE_API_TOKEN wrangler tail --format=pretty)",
      "Bash(env -u CLOUDFLARE_API_TOKEN wrangler kv key get analysis_2025-09-10 --binding=TRADING_RESULTS)",
      "Bash(env -u CLOUDFLARE_API_TOKEN npx wrangler deploy)",
      "Bash(env -u CLOUDFLARE_API_TOKEN npx wrangler tail --format=pretty)",
      "Bash(git pull:*)",
      "Bash(env -u CLOUDFLARE_API_TOKEN npx wrangler kv key list --binding=TRADING_RESULTS)",
      "WebFetch(domain:tft-trading-system.yanggf.workers.dev)",
      "Bash(env)",
      "Read(//home/yanggf/**)",
      "Read(//home/yanggf/**)",
      "Bash(env -u CLOUDFLARE_API_TOKEN wrangler login)",
      "Bash(env -u CLOUDFLARE_API_TOKEN wrangler tail --format=pretty --search=\"CRON-START\")",
      "Bash(CLOUDFLARE_API_TOKEN=\"MqsT-nsm2pdQD6L5zUq1jwE7BzPZ5nFRgKbolaiC\" wrangler whoami)",
      "Bash(for i in {1..3})",
      "Bash(do echo \"Test $i:\")",
      "Bash(done)",
      "Bash(env -u CLOUDFLARE_API_TOKEN npx wrangler kv key delete \"simple_test_key\" --binding=TRADING_RESULTS)",
      "Bash(env -u CLOUDFLARE_API_TOKEN npx wrangler kv key delete \"simple_test_key\" --binding=TRADING_RESULTS --preview false)",
      "Bash(rm:*)",
      "Bash(unzip:*)",
      "Bash(env -u CLOUDFLARE_API_TOKEN npx wrangler r2 object list tft-trading-models)",
      "Bash(env -u CLOUDFLARE_API_TOKEN npx wrangler r2 bucket list)",
      "Bash(npm rebuild:*)",
      "Bash(find:*)",
      "Bash(env -u CLOUDFLARE_API_TOKEN npx wrangler tail --format=pretty --search=\"TFT\\|N-HITS\\|predict\")",
      "Bash(env -u CLOUDFLARE_API_TOKEN npx wrangler secret list)",
      "Bash(cp:*)",
      "Bash(git stash:*)",
      "Bash(env -u CLOUDFLARE_API_TOKEN npx wrangler r2 object get metadata.json --bucket=tft-trading-models)",
      "Bash(env -u CLOUDFLARE_API_TOKEN npx wrangler r2 object get tft-trading-models/metadata.json --pipe)",
      "Bash(env -u CLOUDFLARE_API_TOKEN npx wrangler r2 object get tft-trading-models/tft-trained/model.json --pipe)",
      "Bash(pip install:*)",
      "Bash(FMP_API_KEY=JMbAbEvjFXbqvhRpxnbuIcgphGN32ro2 node test_sentiment_local.js)",
      "Bash(FMP_API_KEY=JMbAbEvjFXbqvhRpxnbuIcgphGN32ro2 NEWSAPI_KEY=00e6b11b1e5f452db92a40fa64434680 node test_sentiment_local.js)",
      "Bash(env -u CLOUDFLARE_API_TOKEN npx wrangler secret put FMP_API_KEY)",
      "Bash(env -u CLOUDFLARE_API_TOKEN npx wrangler secret put NEWSAPI_KEY)",
      "Bash(env -u CLOUDFLARE_API_TOKEN npx wrangler r2 object put tft-trading-models/deployment_metadata.json --file=deployment_metadata.json)",
      "Bash(env -u CLOUDFLARE_API_TOKEN npx wrangler r2 object put tft-trading-models/enhanced_tft_weights.json --file=tft_weights.json)",
      "Bash(env -u CLOUDFLARE_API_TOKEN npx wrangler r2 object put tft-trading-models/enhanced_nhits_weights.json --file=nhits_weights.json)",
      "Bash(env -u CLOUDFLARE_API_TOKEN npx wrangler r2 object get --bucket=tft-trading-models deployment_metadata.json)",
      "Bash(env -u CLOUDFLARE_API_TOKEN npx wrangler r2 object get tft-trading-models/deployment_metadata.json --pipe)",
      "Bash(env -u CLOUDFLARE_API_TOKEN npx wrangler r2 object get tft-trading-models/enhanced_tft_weights.json --pipe)",
      "Bash(env -u CLOUDFLARE_API_TOKEN wrangler r2 object get tft-trading-models/metadata.json --pipe)",
      "Bash(env:*)",
      "Bash(env -u CLOUDFLARE_API_TOKEN wrangler r2 object put tft-trading-models/enhanced_nhits_weights.json --file=nhits_weights.json)",
      "Bash(TZ=America/New_York date)",
      "mcp__amazon-q-cli__ask_q",
      "Bash(/dev/null)",
      "Bash(for:*)",
      "Bash(do env -u CLOUDFLARE_API_TOKEN npx wrangler kv key delete \"analysis_$date\" --binding=TRADING_RESULTS --preview false)",
      "Bash(do env:*)",
      "Bash(timeout 20 curl -s -H \"X-API-KEY: yanggf\" \"https://tft-trading-system.yanggf.workers.dev/analyze\")",
      "Bash(timeout 30 curl -s -H \"X-API-KEY: yanggf\" \"https://tft-trading-system.yanggf.workers.dev/analyze\")",
      "Bash(timeout 25 curl -s -H \"X-API-KEY: yanggf\" \"https://tft-trading-system.yanggf.workers.dev/analyze\")",
      "Bash(do echo \"测试 $i:\")",
      "Bash(timeout 20 curl -s -H \"X-API-KEY: yanggf\" \"https://tft-trading-system.yanggf.workers.dev/test-sentiment\")",
      "Bash(timeout 25 curl -s -H \"X-API-KEY: yanggf\" \"https://tft-trading-system.yanggf.workers.dev/test-sentiment\")",
      "Bash(timeout 30 curl -s -H \"X-API-KEY: yanggf\" \"https://tft-trading-system.yanggf.workers.dev/test-sentiment\")",
      "Bash(timeout 45 curl -s -H \"X-API-KEY: yanggf\" \"https://tft-trading-system.yanggf.workers.dev/test-sentiment\")",
      "Bash(timeout 60 curl -s -H \"X-API-KEY: yanggf\" \"https://tft-trading-system.yanggf.workers.dev/analyze\")",
      "Bash(timeout 45 curl -s -H \"X-API-KEY: yanggf\" \"https://tft-trading-system.yanggf.workers.dev/test-facebook\")",
      "Bash(timeout 60 curl -s -H \"X-API-KEY: yanggf\" \"https://tft-trading-system.yanggf.workers.dev/test-all-facebook\")",
      "Bash(timeout 15 curl -s -H \"X-API-KEY: yanggf\" \"https://tft-trading-system.yanggf.workers.dev/test-sentiment\")",
      "Bash(timeout 10 curl -s -H \"X-API-KEY: yanggf\" \"https://tft-trading-system.yanggf.workers.dev/analyze\")",
      "Bash(git reset:*)",
      "Bash(timeout 30 curl -s -H \"X-API-KEY: yanggf\" \"https://tft-trading-system.yanggf.workers.dev/debug-env\")",
      "Bash(timeout 30 curl -s -H \"X-API-KEY: yanggf\" \"https://tft-trading-system.yanggf.workers.dev/test-facebook\")",
      "Bash(timeout 15 curl -s -H \"X-API-KEY: yanggf\" \"https://tft-trading-system.yanggf.workers.dev/health\")",
      "Bash(timeout 45 curl -s -H \"X-API-KEY: yanggf\" \"https://tft-trading-system.yanggf.workers.dev/analyze\")",
      "Bash(timeout 60 curl -s -H \"X-API-KEY: yanggf\" \"https://tft-trading-system.yanggf.workers.dev/analyze\")",
      "Bash(timeout 15 curl -s -H \"X-API-KEY: yanggf\" \"https://tft-trading-system.yanggf.workers.dev/kv-debug\")",
      "Bash(timeout 15 curl -s -H \"X-API-KEY: yanggf\" \"https://tft-trading-system.yanggf.workers.dev/results\")",
      "Bash(timeout 15 wrangler tail --format=pretty --search=\"KV\")",
      "Bash(timeout 15 curl -s -H \"X-API-KEY: yanggf\" \"https://tft-trading-system.yanggf.workers.dev/kv-get?key=analysis_2025-09-25\")",
      "Bash(npm update:*)",
      "Bash(timeout 45 curl -s -H \"X-API-KEY: yanggf\" \"https://tft-trading-system.yanggf.workers.dev/cron-midday\")",
      "Bash(timeout 45 curl -s -H \"X-API-KEY: yanggf\" \"https://tft-trading-system.yanggf.workers.dev/cron-friday\")",
      "Bash(timeout 45 curl -s -H \"X-API-KEY: yanggf\" \"https://tft-trading-system.yanggf.workers.dev/cron-morning\")",
      "Bash(timeout 45 curl -s -H \"X-API-KEY: yanggf\" \"https://tft-trading-system.yanggf.workers.dev/cron-daily\")",
      "Bash(timeout 45 curl -s -H \"X-API-KEY: yanggf\" \"https://tft-trading-system.yanggf.workers.dev/cron-sunday\")",
      "Bash(timeout 15 env -u CLOUDFLARE_API_TOKEN npx wrangler tail --format=pretty)",
      "Bash(timeout 15 env -u CLOUDFLARE_API_TOKEN npx wrangler tail --format=pretty --search=\"KV\")",
      "Bash(timeout:*)",
      "Bash(unset:*)",
      "Bash(export:*)",
      "Read(//tmp/**)",
      "mcp__amazon-q-mcp-server__q_translate",
      "Bash(tree:*)",
      "Bash(python3:*)",
      "Bash(TZ='America/New_York' date)",
      "Bash(chmod:*)",
      "Bash(./comprehensive_optimization_test.sh:*)",
      "Bash(xargs ls:*)",
      "Bash(./comprehensive_enhancement_test.sh:*)",
      "mcp__amazon-q-cli__cue_q",
      "Bash(pkill:*)",
      "Bash(q:*)",
      "Bash(cat:*)",
      "Bash(TZ:*)",
      "Bash(jq '{success, message, analyzed_date}' echo \"\" echo \"=== Test KV Write with Debug Endpoint ===\" curl -s -H \"X-API-KEY: yanggf\" \"https://tft-trading-system.yanggf.workers.dev/kv-debug\")",
      "Bash(jq '{success, message, kv_binding}' echo \"\" echo \"=== List KV Keys ===\" env -u CLOUDFLARE_API_TOKEN npx wrangler kv key list --binding=TRADING_RESULTS)",
      "Bash(jq '.' echo \"\" echo \"=== Test KV Write ===\" curl -s -H \"X-API-KEY: yanggf\" \"https://tft-trading-system.yanggf.workers.dev/kv-debug\")",
      "Bash(jq '{success, message, kv_key, write_timestamp}' echo \"\" echo \"=== Waiting 65 seconds for KV eventual consistency... ===\" date \"+%H:%M:%S - Write completed, waiting...\" sleep 65 date \"+%H:%M:%S - Wait complete, testing read...\" echo \"\" echo \"=== STEP 2: Read Test Analysis from KV ===\" curl -s \"https://tft-trading-system.yanggf.workers.dev/kv-analysis-read-test\")",
      "Bash(npx tsc:*)",
      "Bash(do echo \"Checking: $file\")",
      "Bash(git log:*)",
      "Bash(ls:*)",
      "Bash(awk:*)",
      "Bash(xargs:*)",
      "Bash(do base=\"$f%.ts\")",
      "Bash(if [ -f \"$base.js\" ])",
      "Bash(then echo \"$base has both .js and .ts\")",
      "Bash(fi)",
      "Bash(do echo \"=== $base ===\")",
      "Bash(then echo \"$base\")",
      "Bash(do echo \"Moving $base.js to archive...\")",
      "Bash(while read f)",
      "Bash(do base=\"$f%.js\")",
      "Bash(if [ -f \"$base.ts\" ])",
      "Bash(then echo \"$base: HAS TS\")",
      "Bash(do if [ -f \"$f.ts\" ])",
      "Bash(then echo \"$f: HAS TS VERSION\")",
      "Bash(else echo \"$f: JS ONLY\")",
      "Bash(jq '{success, status, version, services}' echo \"\" echo \"=== Test 2: Model Health ===\" curl -s \"https://tft-trading-system.yanggf.workers.dev/model-health\")",
      "Bash(jq '{timestamp, models: {gpt_oss_120b: .models.gpt_oss_120b.status, distilbert: .models.distilbert.status}, overall_status}' echo \"\" echo \"=== Test 3: Data Retrieval (Results) ===\" curl -s -H \"X-API-KEY: yanggf\" \"https://tft-trading-system.yanggf.workers.dev/results\")",
      "Bash(jq -c '{success, status, version}' echo \"\" echo \"Test 2: Model Health (AI integration with TypeScript handlers)\" curl -s \"https://tft-trading-system.yanggf.workers.dev/model-health\")",
      "Bash(jq -c '{success, date: .data.date, system_status: .data.summary.system_status}' echo \"\" echo \"Test 4: KV Debug (dal.ts write/read operations)\" curl -s \"https://tft-trading-system.yanggf.workers.dev/kv-debug\")",
      "Bash(jq -c '{success, message, kv_binding}' echo \"\" echo \"Test 5: Results Endpoint (data.ts operations)\" curl -s -H \"X-API-KEY: yanggf\" \"https://tft-trading-system.yanggf.workers.dev/results\")",
      "Bash(/tmp/verify_typescript.sh:*)",
      "Bash(do echo:*)",
      "Bash(echo:*)",
      "Bash(git init:*)",
      "Bash(gh auth:*)",
      "Bash(gh secret set:*)",
      "Bash(gh:*)",
      "Bash(open:*)",
      "Bash(CLOUDFLARE_API_TOKEN=\"MqsT-nsm2pdQD6L5zUq1jwE7BzPZ5nFRgKbolaiC\" npx wrangler deploy)",
      "Bash(./test-api-v1-integration.sh:*)",
      "Bash(./test-sector-rotation-api.sh:*)",
      "Bash(./test-market-drivers-api.sh:*)",
      "mcp__amazon-q-mcp-server__ask_q",
      "mcp__rovodev__ask-rovodev",
      "mcp__rovodev__next-chunk",
      "mcp__rovodev__fetch-chunk",
      "Bash(./deploy-enhanced-system.sh:*)",
      "Bash(./test-enhanced-system.sh:*)",
      "mcp__cortex__semantic_search",
      "mcp__cortex__real_time_status",
      "Bash(./test-sector-simple.sh:*)",
      "Bash(./test-backend-build.sh:*)",
      "Bash(./test-backend-working.sh:*)",
      "Bash(./quick-backend-test.sh:*)",
      "mcp__gemini-cli__fetch-chunk",
      "Bash(./test-all-new-features.sh:*)",
      "Bash(./test-backtesting-api.sh:*)",
      "Bash(./test-portfolio-api.sh:*)",
      "Bash(./test-risk-management-api.sh:*)",
      "Bash(./test-ai-predictive-api.sh:*)",
      "Bash(wc:*)",
      "Bash(./test-auth-security.sh)",
      "Bash(./test-workflows.sh:*)",
      "Bash(./test-ai-model-stability.sh:*)",
      "Bash(./test-dashboard-fixes.sh:*)",
      "Bash(./test-console-error-fixes.sh:*)",
      "Bash(./test-specific-console-fixes.sh:*)",
      "Bash(./test-local-console-fixes.sh:*)",
      "Bash(git rm:*)",
      "Read(///**)",
      "Bash(./test-cache-metrics.sh)",
      "Bash(sort:*)",
      "Bash(git checkout:*)",
      "Bash(CLOUDFLARE_API_TOKEN=\"MqsT-nsm2pdQD6L5zUq1jwE7BzPZ5nFRgKbolaiC\" npx wrangler deploy:*)",
      "Bash(./test-typescript-migration.sh:*)",
      "Bash(./test-enhanced-cache-integration.sh:*)",
      "Bash(./run-regression-tests.sh:*)",
      "Bash(./validate-enhanced-cache.sh:*)",
      "Bash(./simple-cache-test.sh:*)",
      "Bash(npx playwright install:*)",
      "Bash(npx playwright install-deps:*)",
      "Bash(npm uninstall:*)",
      "Bash(playwright test:*)",
      "Bash(npx playwright test:*)"
    ],
    "deny": [],
    "ask": []
  }
}
